# Test cases for SQLite-L project milestone 2
# As described in the README, this test can be run the same way as any other
# individual test in SQLite.

set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix milestone2

do_execsql_test milestone2-100 {
  CREATE TABLE points(
    p POINT
  );
  INSERT INTO points VALUES('1.0, 2.0');
  INSERT INTO points VALUES('3.0, 4.0');
  INSERT INTO points VALUES('5.0, 6.0');
} {}
do_execsql_test milestone2-110 {
  SELECT p FROM points ORDER BY rowid;
} {1.0,2.0 3.0,4.0 5.0,6.0}
do_execsql_test milestone2-120 {
  SELECT (SELECT p FROM points WHERE rowid = 3) + (SELECT p FROM points WHERE rowid = 2);
} {8.0,10.0}
do_execsql_test milestone2-130 {
  SELECT p + '3.0,1.0' FROM points ORDER BY rowid;
} {4.0,3.0 6.0,5.0 8.0,7.0}
do_execsql_test milestone2-140 {
  SELECT p - '10.0,10.0' FROM points;
} {-9.0,-8.0 -7.0,-6.0 -5.0,-4.0}
do_execsql_test milestone2-150 {
  SELECT 3 * p FROM points;
} {3.0,6.0 9.0,12.0 15.0,18.0}
do_execsql_test milestone2-160 {
  SELECT p / 2 FROM points;
} {0.5,1.0 1.5,2.0 2.5,3.0}

# Below test confirms that when unsupported operation (e.g. addition with
# integer) is attempted with a point a runtime error occurs

do_test milestone2-170 {
  catchsql { SELECT p + 2 FROM points }
} {1 {datatype mismatch}}

finish_test